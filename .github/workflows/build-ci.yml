name: CI Deploy

on:
  pull_request:
    branches:
      - staging
      - main

jobs:
  android_dev:
    if: github.event.pull_request.base.ref == 'staging'
    name: Android Dev APK
    runs-on: ubuntu-latest
    env:
      FIREBASE_API_KEY:      ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_DOMAIN:  ${{ secrets.FIREBASE_AUTH_DOMAIN }}
      FIREBASE_DB_URL:       ${{ secrets.FIREBASE_DB_URL }}
      FIREBASE_PID:          ${{ secrets.FIREBASE_PID }}
      FIREBASE_STORAGE:      ${{ secrets.FIREBASE_STORAGE }}
      FIREBASE_MSG_SENDERID: ${{ secrets.FIREBASE_MSG_SENDERID }}
      FIREBASE_APPID:        ${{ secrets.FIREBASE_APPID }}
      FIREBASE_MEASUREID:    ${{ secrets.FIREBASE_MEASUREID }}
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD:       ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS:              ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD:           ${{ secrets.KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with: { node-version: '24.2.0' }

      - name: Install dependencies
        run: npm install --no-audit --no-fund --legacy-peer-deps

      - name: Install Expo CLI
        run: npm install --global expo-cli

      - name: Decode Android keystore
        run: echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > release-keystore.jks

      - name: Generate native projects
        run: |
          npm run clean-native
          npm run prebuild

      - name: Configure Gradle signing
        run: |
          cat > android/gradle.properties <<EOF
          AURORA_AGENT_UPLOAD_STORE_FILE=../release-keystore.jks
          AURORA_AGENT_UPLOAD_STORE_PASSWORD=$KEYSTORE_PASSWORD
          AURORA_AGENT_UPLOAD_KEY_ALIAS=$KEY_ALIAS
          AURORA_AGENT_UPLOAD_KEY_PASSWORD=$KEY_PASSWORD
          EOF

      - name: Build Dev APK
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Upload Dev APK
        uses: actions/upload-artifact@v4
        with:
          name: aurora-agent.apk
          path: android/app/build/outputs/apk/release/aurora-agent.apk

  android_release:
    if: github.event.pull_request.base.ref == 'main'
    name: Android Release AAB
    runs-on: ubuntu-latest
    needs: android_dev
    env:
      FIREBASE_API_KEY:      ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_DOMAIN:  ${{ secrets.FIREBASE_AUTH_DOMAIN }}
      FIREBASE_DB_URL:       ${{ secrets.FIREBASE_DB_URL }}
      FIREBASE_PID:          ${{ secrets.FIREBASE_PID }}
      FIREBASE_STORAGE:      ${{ secrets.FIREBASE_STORAGE }}
      FIREBASE_MSG_SENDERID: ${{ secrets.FIREBASE_MSG_SENDERID }}
      FIREBASE_APPID:        ${{ secrets.FIREBASE_APPID }}
      FIREBASE_MEASUREID:    ${{ secrets.FIREBASE_MEASUREID }}
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD:       ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS:              ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD:           ${{ secrets.KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4 
        with: { node-version: '24.2.0' }
      - name: Install deps & Expo CLI
        run: |
          npm ci
          npm install --global expo-cli

      - name: Decode Android keystore
        run: echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > release-keystore.jks

      - name: Generate native projects
        run: npm run clean-native && npm run prebuild

      - name: Configure signing
        run: |
          cat > android/gradle.properties <<EOF
          AURORA_AGENT_UPLOAD_STORE_FILE=../release-keystore.jks
          AURORA_AGENT_UPLOAD_STORE_PASSWORD=$KEYSTORE_PASSWORD
          AURORA_AGENT_UPLOAD_KEY_ALIAS=$KEY_ALIAS
          AURORA_AGENT_UPLOAD_KEY_PASSWORD=$KEY_PASSWORD
          EOF

      - name: Build AAB
        run: |
          cd android
          ./gradlew bundleRelease

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: aurora-agent.aab
          path: android/app/build/outputs/bundle/release/aurora-agent.aab

  ios_release:
    if: github.event.pull_request.base.ref == 'main'
    name: iOS Release IPA
    runs-on: macos-latest
    needs: android_release
    env:
      FIREBASE_API_KEY:      ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_DOMAIN:  ${{ secrets.FIREBASE_AUTH_DOMAIN }}
      FIREBASE_DB_URL:       ${{ secrets.FIREBASE_DB_URL }}
      FIREBASE_PID:          ${{ secrets.FIREBASE_PID }}
      FIREBASE_STORAGE:      ${{ secrets.FIREBASE_STORAGE }}
      FIREBASE_MSG_SENDERID: ${{ secrets.FIREBASE_MSG_SENDERID }}
      FIREBASE_APPID:        ${{ secrets.FIREBASE_APPID }}
      FIREBASE_MEASUREID:    ${{ secrets.FIREBASE_MEASUREID }}
      IOS_P12_BASE64:        ${{ secrets.IOS_P12_BASE64 }}
      IOS_P12_PASSWORD:      ${{ secrets.IOS_P12_PASSWORD }}
      IOS_PROV_BASE64:       ${{ secrets.IOS_PROV_BASE64 }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: '24.2.0' }

      - name: Install deps & Expo CLI
        run: |
          npm ci
          npm install --global expo-cli

      - name: Decode iOS signing assets
        run: |
          echo "$IOS_P12_BASE64"    | base64 -d > dist.p12
          echo "$IOS_PROV_BASE64"   | base64 -d > profile.mobileprovision

      - name: Generate native projects
        run: npm run clean-native && npm run prebuild

      - name: Import certificate & provisioning profile
        run: |
          security create-keychain -p "" build.keychain
          security import dist.p12 \
            -k ~/Library/Keychains/build.keychain \
            -P "$IOS_P12_PASSWORD" \
            -T /usr/bin/codesign
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision \
            ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build & export IPA
        run: npm run build:ios

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: aurora-agent.ipa
          path: ios/build/aurora-agent.ipa